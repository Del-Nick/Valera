import difflib
from pprint import pprint

from natsort import natsorted
from vkbottle import Bot
from vkbottle.http import aiohttp

from Config.Config import doc_uploader, api, GETTING_ERROR
from Files.Files import *
from Handlers.Keyboards import *
from Handlers.Settings import start_settings
from Scripts.Arrays import GROUPS, workshop_rooms
from Server.Core import DB, BooksDB, HomeworksDB, WorkshopsDB, SessionDB, LessonScheduleDB, CustomLessonScheduleDB
from Scripts.FloorCabinetSearchEngine import check_rooms, rooms
from Handlers.Event import event_schedule, Keyboards

from vkbottle.bot import Message
from datetime import datetime, timedelta
import re

from Server.Models import Books, Workshops, WeekType


weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']


async def start_menu(user: User, message: Message):
    if '–î–ó' in message.text or 'homeworks' in user.action:
        await get_and_send_homeworks(user, message)

    elif '–£—á–µ–±–Ω–∏–∫–∏' in message.text or 'books' in user.action:
        await get_and_send_books(user, message)

    elif '–ü—Ä–∞–∫–∏' in message.text or 'workshops' in user.action:
        await get_and_send_workshops(user, message)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in message.text:
        await schedule_builder(user, message)
        user.action = 'start_menu_after_schedule'

    elif '–°–µ—Å—Å–∏—è' in message.text:
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —á–∏–∏–∏–ª–ª–ª...',
                             keyboard=standard_keyboard(user))

    elif user.action == 'start_menu_session':
        await process_session_schedule(user, message)

    # elif '–¥–µ–Ω—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–∞—É–∫–∏' in message.text.lower():
    #     user.action = 'event'
    #     await message.answer(message=event_schedule,
    #                          keyboard=Keyboards.main_keyboard())

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message.text:
        user.action = 'settings_main'
        await start_settings(user, message)

    elif '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞' in message.text and user.settings.admin:
        await message.answer('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –µ–π. –ó–¥–µ—Å—å –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ '
                             '—Ç–æ–ª—å–∫–æ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.\n\n'
                             ''
                             '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –æ–¥–∏–Ω —É—á–µ–±–Ω–∏–∫ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –∫–∞–∫ –∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –í–≤–æ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ '
                             '–ø–æ –æ–±—Ä–∞–∑—Ü—É: "–∫—É—Ä—Å -—Å–µ–º–µ—Å—Ç—Ä -–ø—Ä–µ–¥–º–µ—Ç"',
                             keyboard=cancel_keyboard())
        user.action = 'admin_get_book'

    elif 'C—Ç–∞—Ä–æ—Å—Ç–∞' in message.text:
        await message.answer('–†–µ–∂–∏–º —Å—Ç–∞—Ä–æ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –í–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ '
                             '(https://t.me/studsovet_ff_bot)')

    elif check_rooms(message) and user.action == 'start_menu':
        await rooms(user, message)

    elif user.action.startswith('start_menu_after_schedule'):
        if '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ' in message.text:
            user.action = 'start_menu_get_error_description'
            await message.answer('–û–ø–∏—à–∏, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

        elif '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É' in message.text:
            user.action = 'start_menu_after_schedule_get_temp_group'
            await message.answer('–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É')

        elif message.text == '–ù–∞–∑–∞–¥':
            user.action = 'start_menu'
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                 keyboard=standard_keyboard(user))

        elif user.action == 'start_menu_after_schedule_get_temp_group':
            if message.text.lower() in GROUPS:
                user.action = f'start_menu_after_schedule_group={message.text.lower()}'
                await schedule_builder(user, message)

            elif message.text == '–û—Ç–º–µ–Ω–∞':
                user.action = 'start_menu'
                await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                     keyboard=standard_keyboard(user))

            else:
                await message.answer('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ '
                                     '–∑–∞–Ω–æ–≤–æ',
                                     keyboard=group_keyboard(difflib.get_close_matches(message.text.lower(),
                                                                                       GROUPS,
                                                                                       n=5)))

        elif message.text in ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'] or message.text.lower() in GROUPS:
            await schedule_builder(user, message)

        else:
            user.action = 'start_menu'
            await message.answer('–ù–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω—è–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                 keyboard=standard_keyboard(user))

    elif check_rooms(message):
        await rooms(user, message)

    elif user.action == 'start_menu_get_error_description':
        user.action = 'start_menu'
        await message.answer('–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∞–º –≥—Ä—É–ø–ø—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!',
                             keyboard=standard_keyboard(user))
        if GETTING_ERROR:
            await api.messages.send(peer_id=2000000001, random_id=0,
                                    message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.VkFirstName} {user.VkLastName} '
                                            f'–ø–æ–π–º–∞–ª –æ—à–∏–±–∫—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –£–∏—É–∏—É–∏—É–∏—É–∏ üö®üö®üö®\n\n'
                                            f'–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫—É: https://vk.com/gim34300772?sel={user.VkID}\n\n'
                                            f'–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç {user.VkFirstName}:\n\n{message.text}')

    else:
        user.action = 'start_menu'
        await message.answer('–ù–µ —Å–æ–≤—Å–µ–º —Ç–µ–±—è –ø–æ–Ω—è–ª',
                             keyboard=standard_keyboard(user))


async def get_and_send_homeworks(user: User, message: Message):
    homeworks = await HomeworksDB.select_homeworks(user.groups[0])

    if homeworks.homeworks:
        if '–î–ó' in message.text:
            user.action = 'start_homeworks'
            buttons = [x for x in homeworks.homeworks.keys()]
            await message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                                 keyboard=custom_keyboard(buttons=buttons))

        elif '–ù–∞–∑–∞–¥' in message.text:
            user.action = 'start_menu'
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                 keyboard=standard_keyboard(user))

        elif message.text in homeworks.homeworks.keys():
            subject = message.text

            if homeworks.homeworks[subject]:
                for i, homework in enumerate(homeworks.homeworks[subject]):
                    media = [attach['vk_file_id'] for attach in homework['attachments']]

                    if homework['text']:
                        await message.answer(f'{i + 1}. {homework['text']}\n\n'
                                             f'–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {homework['date']}',
                                             attachment=media)

                    else:
                        await message.answer(f'{i + 1}. {homework['text']}\n\n'
                                             f'–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {homework['date']}',
                                             attachment=media)

                buttons = [x for x in homeworks.homeworks.keys()]
                await message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                                     keyboard=custom_keyboard(buttons=buttons))

            else:
                buttons = [x for x in homeworks.homeworks.keys()]
                await message.answer('–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç, '
                                     '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
                                     keyboard=custom_keyboard(buttons=buttons))

        else:
            buttons = [x for x in homeworks.homeworks.keys()]
            await message.answer('–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
                                 keyboard=custom_keyboard(buttons=buttons))

    else:
        user.action = 'start_menu'
        await message.answer('–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π —Å—Ç–∞—Ä–æ—Å—Ç–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. –ï—Å–ª–∏ —Ç—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏–ª–∏ —Ö–æ—á–µ—à—å '
                             '—Ä—É–∫–æ–≤–æ–¥–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ, –Ω–∞–ø–∏—à–∏ @id318861079 (–ö–∞—Ç–µ)',
                             keyboard=standard_keyboard(user))


async def get_and_send_workshops(user: User, message: Message):
    workshops: Workshops = await WorkshopsDB.select_workshops(user.groups[0][0])
    semester = '2 —Å–µ–º–µ—Å—Ç—Ä' if 1 < datetime.now().month < 7 else '1 —Å–µ–º–µ—Å—Ç—Ä'

    if workshops.workshops:
        if '–ü—Ä–∞–∫–∏' in message.text:
            if len(list(workshops.workshops.keys())) == 1:
                subject = list(workshops.workshops[semester].keys())[0]
                user.action = f'start_workshops_subject={subject}_get_num'

                buttons = natsorted([x['num'] for x in workshops.workshops[semester][subject]])
                await message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞',
                                     keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

            else:
                user.action = f'start_workshops_get_subject'
                subjects = list(workshops.workshops[semester].keys())
                buttons = natsorted([x for x in subjects])
                await message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç',
                                     keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

        elif 'get_num' in user.action:
            subject = re.search(r'subject=[0-9a-zA-Z–∞-—è–ê-–Ø .]{1,20}', user.action).group().replace('subject=', '')

            if message.text in [x['num'] for x in workshops.workshops[semester][subject]]:
                num = message.text

                for i, book in enumerate(workshops.workshops[semester][subject]):
                    try:
                        room = f'\n\nüìç {workshop_rooms[subject][book['num']]}'
                    except KeyError:
                        room = ''

                    if book['num'] == num:
                        await message.answer(book['name'] + room,
                                             attachment=book['vk_file_id'])

                buttons = natsorted([x['num'] for x in workshops.workshops[semester][subject]])
                await message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞',
                                     keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

            elif '–ù–∞–∑–∞–¥' in message.text:
                if len(list(workshops.workshops.keys())) == 1:
                    subject = list(workshops.workshops.keys())[0]
                    semester = semester if subject in workshops.workshops[semester].keys() else '2 —Å–µ–º–µ—Å—Ç—Ä'
                    user.action = f'start_workshops_subject={subject}_get_num'

                    buttons = natsorted([x['num'] for x in workshops.workshops[semester][subject]])
                    await message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞',
                                         keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

                else:
                    user.action = f'start_workshops_get_subject'
                    subjects = list(workshops.workshops[semester].keys())
                    buttons = natsorted([x for x in subjects])
                    await message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç',
                                         keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

            else:
                buttons = natsorted([x['num'] for x in workshops.workshops[semester][subject]])
                await message.answer('–ö–∞–∂–µ—Å—Ç—è, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –º–µ—Ç–æ–¥–∏—á–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
                                     keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

        elif 'get_subject' in user.action:
            if '–ù–∞–∑–∞–¥' in message.text:
                user.action = 'start_menu'
                await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                     keyboard=standard_keyboard(user))

            else:
                subject = message.text
                user.action = f'start_workshops_subject={subject}_get_num'

                buttons = natsorted([x['num'] for x in workshops.workshops[semester][subject]])
                await message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞',
                                     keyboard=custom_keyboard(buttons=buttons, buttons_in_row=5))

    else:
        await message.answer('–°—Ç—Ä–∞–Ω–Ω–æ.. –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥–∏—á–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫—É–º–æ–≤',
                             keyboard=standard_keyboard(user))


async def get_and_send_books(user: User, message: Message):
    books: Books = await BooksDB.select_books(user.groups[0][0])
    semester = '2 —Å–µ–º–µ—Å—Ç—Ä' if 1 < datetime.now().month < 7 else '1 —Å–µ–º–µ—Å—Ç—Ä'

    if books.books:
        if 'subject' not in user.action:
            buttons = list(books.books[semester].keys())
            await message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç', keyboard=custom_keyboard(buttons=buttons))
            user.action = 'start_books_subject'

        elif message.text == '–ù–∞–∑–∞–¥':
            await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=standard_keyboard(user))
            user.action = 'start_menu'

        else:
            if message.text not in books.books[semester].keys():
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç', keyboard=standard_keyboard(user))
                user.action = 'start_menu'

            else:
                subject = message.text

                media = []

                for num, book in enumerate(books.books[semester][subject]):
                    if books.books[semester][subject][num]['type'] == 'document':
                        media.append(books.books[semester][subject][num]['vk_file_id'])

                    else:
                        media.append(books.books[semester][subject][num]['vk_file_id'])

                await message.answer(subject,
                                     attachment=media)
                buttons = list(books.books[semester].keys())
                await message.answer('–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç',
                                     keyboard=custom_keyboard(buttons=buttons))

    else:
        await message.answer('–£—á–µ–±–Ω–∏–∫–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
                             keyboard=standard_keyboard(user))


async def back_to_start(user: User, message: Message):
    if user.groups:
        user.action = 'start_menu'

        await message.answer('–õ—é–±–æ–≤—å, –Ω–∞–¥–µ–∂–¥–∞ –∏ –≤–µ—Ä–∞-–∞-–∞', keyboard=standard_keyboard(user))

    elif not user.groups:
        await message.answer('–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, '
                             '—Å–∫–æ—Ä–æ –º—ã —Å–æ –≤—Å–µ–º —Ä–∞–∑–±–µ—Ä—ë–º—Å—è', keyboard=standard_keyboard(user))


async def schedule_builder(user: User, message: Message):
    if message.text in GROUPS:
        group = message.text
        user.action = f'start_menu_after_schedule_group={group}'

    else:
        group = user.action.replace('start_menu_after_schedule_group=', '') if 'group' in user.action else user.groups[
            0]

    time = ['9:00-10:35', '10:50-12:25', '13:30-15:05', '15:20-16:55', '17:05-18:40',
            '18:55-20:30']

    week_number = datetime.today().isocalendar().week - 5

    if message.text in ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë']:
        day = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'].index(message.text)
        date = datetime.now() - timedelta(days=datetime.now().weekday() - day)
        if datetime.now().weekday() > 4 and datetime.now().time() > user.settings.tomorrow_schedule_after:
            date += timedelta(days=7)
            week_number += 1

    else:
        day = datetime.today().weekday()
        date = datetime.now()

        if day == 6:
            day = 0
            date += timedelta(days=1)
            week_number += 1
        elif datetime.now().time() > user.settings.tomorrow_schedule_after:
            if day == 5:
                day = 0
                date += timedelta(days=2)
                week_number += 1
            else:
                day += 1
                date += timedelta(days=1)

    lessons = await LessonScheduleDB.select(group_name=group, weekday=day,
                                            week_type=WeekType.ODD if week_number % 2 == 1 else WeekType.EVEN)
    custom_lessons = await CustomLessonScheduleDB.select(group_name=group, weekday=day,
                                                         week_type=WeekType.ODD if week_number % 2 == 1 else WeekType.EVEN)

    answer = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}\n\n' if group != user.groups[0] else ''
    answer += weekdays[day].upper() + ', ' + date.strftime(
        '%d.%m') + f' ______ –ù–µ–¥–µ–ª—è ‚Ññ {week_number}' + '\n\n'

    if lessons:
        schedule = {lesson.lesson_number: lesson for lesson in lessons}
        custom_schedule = {lesson.lesson_number: lesson for lesson in custom_lessons}

        lessons = [schedule[x] for x in sorted(list(schedule.keys()))]

        for i, lesson in enumerate(lessons):
            for custom_lesson in custom_lessons:
                if custom_lesson:
                    if (custom_lesson.group_id == lesson.group_id and
                            custom_lesson.weekday == lesson.weekday and
                            custom_lesson.week_type == lesson.week_type and
                            custom_lesson.lesson_number == lesson.lesson_number):
                        lessons[i] = custom_lesson

        answer = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}\n\n' if group != user.groups[0] else ''
        answer += weekdays[day].upper() + ', ' + date.strftime(
            '%d.%m') + f' ______ –ù–µ–¥–µ–ª—è ‚Ññ {week_number}' + '\n\n'

        if lessons[0].lesson_number > 1:
            for _ in range(lessons[0].lesson_number):
                answer += f'{time[_]}\n'

        for lesson in lessons:
            if user.settings.full_schedule:
                answer += f'{time[lesson.lesson_number - 1]}  {lesson.lesson}  {lesson.room}\n{lesson.teacher}\n\n'
            else:
                answer += f'{time[lesson.lesson_number - 1]}  {lesson.lesson}  {lesson.room}\n\n'

        if len(lessons) == 1:
            answer += '\n–£ —Ç–µ–±—è 1 –ø–∞—Ä–∞'
        elif 0 < len(lessons) < 5:
            answer += f'\n–£ —Ç–µ–±—è {len(lessons)} –ø–∞—Ä—ã'
        else:
            answer += f'\n–£ —Ç–µ–±—è {len(lessons)} –ø–∞—Ä'

        await message.answer(answer, keyboard=after_schedule_keyboard(user=user, day=day, group=group))

    else:
        await message.answer(f'{answer}\n\n–£ —Ç–µ–±—è 0 –ø–∞—Ä',
                             keyboard=after_schedule_keyboard(user=user, group=group, day=day))


async def process_session_schedule(user: User, message: Message):
    if message.text == '–ù–∞–∑–∞–¥':
        user.action = 'start_menu'
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             keyboard=standard_keyboard(user))
        return

    if message.text in GROUPS:
        group = message.text
    else:
        group = user.groups[0]

    exams = await SessionDB.select(group)

    if exams:
        remaining_exams = [exam for exam in exams if exam.exam_datetime > datetime.now()]
        count_remaining_exams = len(remaining_exams)

        if count_remaining_exams > 4:
            answer = f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {count_remaining_exams} —ç–∫–∑–∞–º–µ–Ω–æ–≤\n\n'
        elif count_remaining_exams > 1:
            answer = f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {count_remaining_exams} —ç–∫–∑–∞–º–µ–Ω–∞\n\n'
        else:
            answer = '–¢–µ–±–µ –æ—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ 1 —ç–∫–∑–∞–º–µ–Ω\n\n'

        for exam in exams:
            if user.settings.full_schedule:
                answer += (f'üìÖ {exam.exam_datetime.strftime('%d.%m %H:%M')} ‚Äî {exam.room}\n'
                           f'{exam.name}\n'
                           f'-- {exam.teacher}\n\n\n')
            else:
                answer += (f'üìÖ {exam.exam_datetime.strftime('%d.%m %H:%M')} ‚Äî {exam.room}\n'
                           f'{exam.name}\n\n\n')

        answer += f'\n\n–î–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å '
        distance_between_datetimes = remaining_exams[0].exam_datetime - datetime.now()

        hours, remainder = divmod(distance_between_datetimes.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        if distance_between_datetimes.days > 0:
            if distance_between_datetimes.days > 4:
                answer += f'{distance_between_datetimes.days} –¥–Ω–µ–π '
            elif distance_between_datetimes.days > 1:
                answer += f'{distance_between_datetimes.days} –¥–Ω—è '
            else:
                answer += f'{distance_between_datetimes.days} –¥–µ–Ω—å '

        if hours > 0:
            if hours in [2, 3, 4, 22, 23]:
                answer += f'{hours} —á–∞—Å–∞ '
            elif hours in [1, 21]:
                answer += f'{hours} —á–∞—Å '
            else:
                answer += f'{hours} —á–∞—Å–æ–≤ '

        if minutes > 0:
            if minutes in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
                answer += f'{minutes} –º–∏–Ω—É—Ç—ã '
            elif minutes in [1, 21, 31, 41, 51]:
                answer += f'{minutes} –º–∏–Ω—É—Ç–∞ '
            else:
                answer += f'{minutes} –º–∏–Ω—É—Ç '

        if seconds > 0:
            if seconds in [2, 3, 4, 22, 23, 24, 32, 33, 34, 42, 43, 44, 52, 53, 54]:
                answer += f'{minutes} –º–∏–Ω—É—Ç '
            elif seconds in [1, 21, 31, 41, 51]:
                answer += f'{seconds} —Å–µ–∫—É–Ω–¥–∞'
            else:
                answer += f'{seconds} —Å–µ–∫—É–Ω–¥'

        answer += ('\n\n___________________________\n'
                   'P.s. –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏. –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä—å –ø–æ —Ñ–∞–π–ª—É –æ—Ç —É—á–µ–±–Ω–æ–π —á–∞—Å—Ç–∏\n'
                   'P.p.s. –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã–≤–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π) –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
        buttons = [other_group for other_group in user.groups if other_group != group]
        await message.answer(message=answer,
                             keyboard=custom_keyboard(buttons=buttons,
                                                      buttons_in_row=5))

    else:
        buttons = [other_group for other_group in user.groups if other_group != group]
        await message.answer(message='–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã',
                             keyboard=custom_keyboard(buttons=buttons,
                                                      buttons_in_row=5))
