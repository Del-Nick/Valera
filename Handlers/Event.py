import asyncio
import random
from datetime import datetime

from Handlers.Keyboards import standard_keyboard
from Server.Core import QuizUserDB, QuizDB
from Server.Models import User, Quiz, QuizUser
from vkbottle.bot import Message
from vkbottle import Keyboard, KeyboardButtonColor, Text


class Keyboards:
    @staticmethod
    def main_keyboard():
        keyboard = Keyboard(one_time=True) \
            .add(Text('ü§Ø  –ö–í–ò–ó  ü§Ø'), color=KeyboardButtonColor.POSITIVE) \
            .row() \
            .add(Text('–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.SECONDARY)

        return keyboard

    @staticmethod
    def start_quiz_keyboard():
        keyboard = Keyboard(one_time=True) \
            .add(Text('–ö–æ–Ω–µ—á–Ω–æ!'), color=KeyboardButtonColor.POSITIVE) \
            .row() \
            .add(Text('–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.SECONDARY)

        return keyboard

    @staticmethod
    def quiz_keyboard(question: Quiz):
        keyboard = Keyboard(one_time=True)

        vars = question.variants
        random.shuffle(vars)

        for i, var in enumerate(vars):
            keyboard.add(Text(var.replace('*', '')), color=KeyboardButtonColor.PRIMARY)

            if i < len(vars) - 1:
                keyboard.row()

        return keyboard


wrong_answers = ['–ù–µ–≤–µ—Ä–Ω–æ, –Ω–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è: –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!',
                 '–ù–µ–≤–µ—Ä–Ω–æ, –Ω–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –µ—â—ë –æ–¥–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ',
                 '–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫',
                 '–ù—É, –ø–æ—á—Ç–∏']

true_answers = ['–î–∞, –≤ —Ç–æ—á–∫—É!',
                '–ó—Ä–∏—à—å –≤ –∫–æ—Ä–µ–Ω—å!',
                '–ö—Ç–æ –ø–æ–Ω—è–ª –∂–∏–∑–Ω—å, —Ç–æ—Ç –Ω–µ —Å–ø–µ—à–∏—Ç']

event_schedule = ('–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–∏—É—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ –î–Ω—é —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–∞—É–∫–∏.\n\n'
                  ''
                  '          7 —Ñ–µ–≤—Ä–∞–ª—è:\n\n'
                  '12¬≥‚Å∞ - 14‚Å∞‚Å∞ ‚Äî –∫—Ä—É–≥–ª—ã–π —Å—Ç–æ–ª —Å —É—á—ë–Ω—ã–º–∏ —Ñ–∏–∑—Ñ–∞–∫–∞ "–§–∏–∑–∏–∫–æ–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è" –≤ –°–§–ê\n'
                  '14‚Å∞‚Å∞ - 15¬≤‚Å∞ ‚Äî –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "–û—Ñ–æ—Ä–º–∏ —Å—Ç–µ–Ω–¥–æ–≤—ã–π –¥–æ–∫–ª–∞–¥", —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è '
                  '–∏–≥—Ä–∞ "AliaScience" –∏ –∫–æ—Ñ–µ-–±—Ä–µ–π–∫ –≤ —Ö–æ–ª–ª–µ –¶–§–ê\n'
                  '15¬≤‚Å∞ - 16‚Åµ‚Åµ ‚Äî –õ–µ–∫—Ü–∏—è –æ—Ç "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ" –≤ –°–§–ê\n\n\n'
                  ''
                  '          12 —Ñ–µ–≤—Ä–∞–ª—è:\n\n'
                  'üîπ"–ù–∞—É—á–Ω—ã–π –±–æ–π" –º–µ–∂–¥—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏ –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ 1 –ì–£–ú–∞\n'
                  'üîπ–≠–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏ - –¥–∞—Ç—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è\n'
                  'üîπ–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –∏ –∫–∞—Ñ–µ–¥—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ - –¥–∞—Ç—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è')


async def event_handler(user: User, message: Message):
    if user.action == 'event':
        quiz_user = await QuizUserDB.select(user_id=user.ID)

        if '–∫–≤–∏–∑' in message.text.lower():
            if quiz_user:
                await message.answer(message=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {quiz_user.count_true_answers} –∏–∑ 11 '
                                             f'–≤–æ–ø—Ä–æ—Å–æ–≤! –ù–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—à–ª–æ '
                                             f'{(quiz_user.end_datetime - quiz_user.start_datetime).total_seconds():.1f} c')
                await message.answer(message=event_schedule,
                                     keyboard=Keyboards.main_keyboard())
            else:
                await message.answer(
                    message='–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ —ç—Ç–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—É—Ç 11 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö '
                            '–æ–±–ª–∞—Å—Ç–µ–π. \n\n'
                            '–ó–∞ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–∏–∑—ã, –Ω–æ –∏–≥—Ä–∞–π —á–µ—Å—Ç–Ω–æ, –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–π –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏ –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–∏–º '
                            '—É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –î–∞–≤–∞–π –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –∏–≥—Ä—ã.\n\n'
                            ''
                            '–ù–µ–±–æ–ª—å—à–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–∫–∞ –Ω–µ '
                            '–∑–∞–∫–æ–Ω—á–∏—à—å –µ—ë. –ù–∞—á–∏–Ω–∞–µ–º?',
                    keyboard=Keyboards.start_quiz_keyboard())
                user.action = 'event_quiz'

        else:
            user.action = 'start_menu'
            await message.answer(message='–í–∂—É—Ö! –ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
                                 keyboard=standard_keyboard(user=user))

    elif user.action == 'event_quiz':
        if message.text == '–ö–æ–Ω–µ—á–Ω–æ!':
            user.action = 'event_quiz_started?num=1'
            question = await QuizDB.select(num=1)
            await message.answer(message=question.question,
                                 keyboard=Keyboards.quiz_keyboard(question))
            await QuizUserDB.insert(QuizUser(user_id=user.ID))

        else:
            user.action = 'event'
            await message.answer(message=event_schedule,
                                 keyboard=Keyboards.main_keyboard())

    elif user.action.startswith('event_quiz_started'):
        num = int(user.action.replace('event_quiz_started?num=', ''))
        question = await QuizDB.select(num=num)
        quiz_user = await QuizUserDB.select(user_id=user.ID)

        if message.text == question.answer:
            await message.answer(message=random.choice(true_answers))
            quiz_user.count_true_answers += 1

        else:
            await message.answer(message=random.choice(wrong_answers))

        await message.answer(message=f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.answer}')

        if num == 11:
            quiz_user.end_datetime = datetime.now()

        if question.desc:
            pause = len(question.desc) // 24
            await message.answer(message=f'{question.desc}\n\n'
                                         f'–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {pause} —Å')

            await asyncio.sleep(pause)

        if num < 11:
            question = await QuizDB.select(num=num + 1)
            await message.answer(message=question.question.replace('*', ''),
                                 keyboard=Keyboards.quiz_keyboard(question))
            user.action = f'event_quiz_started?num={num + 1}'

        else:
            await message.answer(message=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –æ—Ç–≤–µ—Ç–∏–≤ –≤–µ—Ä–Ω–æ –Ω–∞ '
                                         f'{quiz_user.count_true_answers} –∏–∑ 11 –≤–æ–ø—Ä–æ—Å–æ–≤! –ù–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—à–ª–æ '
                                         f'{(quiz_user.end_datetime - quiz_user.start_datetime).total_seconds():.1f} c')
            user.action = 'event'
            await message.answer(message=event_schedule,
                                 keyboard=Keyboards.main_keyboard())

        await QuizUserDB.update(quiz_user)
